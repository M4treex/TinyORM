name: Linux GCC/Clang Qt6.2

on:
  pull_request:
  push:
    branches:
      - main
      - gh-actions

jobs:

  build:
    name: cmake build / ctest

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        compiler:
          - key: clang15
            apt: [ clang-15, lld-15 ]
            command: clang++-15

          # - key: gcc12
          #   apt: [ g++-12 ]
          #   command: g++-12

    steps:
    - uses: actions/checkout@v3

    - name: TinyORM prepare environment
      run: |
        runnerWorkPath=$(realpath '${{ runner.workspace }}/..')
        echo "TinyRunnerWorkPath=$runnerWorkPath" >> $GITHUB_ENV

        sqlitePath="$runnerWorkPath/SQLite/$DB_SQLITE_DATABASE"
        echo "TinySQLitePath=$sqlitePath" >> $GITHUB_ENV
      env:
        DB_SQLITE_DATABASE: ${{ secrets.DB_SQLITE_DATABASE }}

    - name: PostgreSQL start service
      run: |
        sudo systemctl start postgresql.service

    - name: PostgreSQL check service status
      run: |
        sudo systemctl status postgresql.service
        pg_isready

    - name: PostgreSQL create TinyORM user
      run: >-
        sudo -u postgres --
        psql --command="CREATE USER $DB_PGSQL_USERNAME PASSWORD '$DB_PGSQL_PASSWORD'"
      env:
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: PostgreSQL create TinyORM database
      run: |
        sudo -u postgres createdb --owner=$DB_PGSQL_USERNAME $DB_PGSQL_DATABASE
      env:
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: Hosts add MySQL server host URL
      run: >-
        sudo -- sh -c "echo '127.0.0.1\t$DB_MYSQL_HOST' >> /etc/hosts"
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}

    - name: MySQL initialize crystal_mysqld.cnf configuration
      working-directory: .github/resources/linux
      run: |
        sudo mv ./crystal_mysqld_ssl.cnf /etc/mysql/mysql.conf.d/crystal_mysqld.cnf

        sudo chown root:root /etc/mysql/mysql.conf.d/crystal_mysqld.cnf
        sudo chmod 644 /etc/mysql/mysql.conf.d/crystal_mysqld.cnf

    - name: MySQL initialize crystal_client.cnf configuration (global)
      working-directory: .github/resources/linux
      run: |
        tmpfile=$(mktemp)

        cat ./crystal_client_ssl.template.cnf | \
        sed 's/{SSL_CERTIFICATES_PATH}/\/usr\/local\/share\/crystal-mysql/' | \
        sed "s/{MYSQL_HOST}/$DB_MYSQL_HOST/" > "$tmpfile"

        sudo mv "$tmpfile" /etc/mysql/conf.d/crystal_client.cnf

        sudo chown root:root /etc/mysql/conf.d/crystal_client.cnf
        sudo chmod 644 /etc/mysql/conf.d/crystal_client.cnf
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}

    - name: MySQL generate SSL certificates
      run: |
        # It's enough to remove only these three certificate-related files
        sudo -u mysql -- rm /var/lib/mysql/{ca,server-cert,server-key}.pem
        sudo mysql_ssl_rsa_setup --suffix=TinyORM --uid=mysql

    - name: MySQL copy SSL certificates for runner user
      run: |
        sudo mkdir -p /usr/local/share/crystal-mysql
        cd /usr/local/share/crystal-mysql

        sudo cp /var/lib/mysql/{ca,client-cert,client-key}.pem /usr/local/share/crystal-mysql
        sudo chown -R root:root /usr/local/share/crystal-mysql
        sudo chmod 444 /usr/local/share/crystal-mysql/{ca,client-cert,client-key}.pem

    - name: MySQL start service
      run: |
        sudo systemctl start mysql.service

    - name: MySQL change root password
      run: >-
        echo "
        alter user '$DB_MYSQL_ROOT_USERNAME'@'localhost'
        identified with caching_sha2_password by '$DB_MYSQL_ROOT_PASSWORD'
        require issuer '/CN=MySQL_Server_TinyORM_Auto_Generated_CA_Certificate' and
        subject '/CN=MySQL_Server_TinyORM_Auto_Generated_Client_Certificate';" |
        mysql --user=$DB_MYSQL_ROOT_USERNAME --password=$DB_MYSQL_ROOT_PASSWORD_DEFAULT
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_PASSWORD_DEFAULT: ${{ secrets.DB_MYSQL_ROOT_PASSWORD_DEFAULT }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL populate time zone tables 👌
      run: >-
        mysql_tzinfo_to_sql /usr/share/zoneinfo |
        mysql --user=$DB_MYSQL_ROOT_USERNAME --password=$DB_MYSQL_ROOT_PASSWORD mysql

        sudo systemctl restart mysql.service
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL check service status
      run: |
        sudo systemctl status mysql.service
        systemctl is-active --quiet mysql.service

        mysqladmin --user=$DB_MYSQL_ROOT_USERNAME --password=$DB_MYSQL_ROOT_PASSWORD ping
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM database
      run: >-
        echo "
        create database if not exists \`$DB_MYSQL_DATABASE\`
        default character set $DB_MYSQL_CHARSET
        default collate $DB_MYSQL_COLLATION;" |
        mysql --user=$DB_MYSQL_ROOT_USERNAME --password=$DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM user
      run: >-
        echo "
        create user '$DB_MYSQL_USERNAME'@'%'
        identified with caching_sha2_password by '$DB_MYSQL_PASSWORD'
        require issuer '/CN=MySQL_Server_TinyORM_Auto_Generated_CA_Certificate' and
        subject '/CN=MySQL_Server_TinyORM_Auto_Generated_Client_Certificate';
        grant all privileges on \`$DB_MYSQL_DATABASE\`.* to '$DB_MYSQL_USERNAME'@'%';
        grant select on \`mysql\`.\`time_zone_name\` to '$DB_MYSQL_USERNAME'@'%';
        flush privileges;" |
        mysql --user=$DB_MYSQL_ROOT_USERNAME --password=$DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}

    - name: SQLite create TinyORM database
      run: |
        mkdir -p "$(dirname "${{ env.TinySQLitePath }}")"

        touch '${{ env.TinySQLitePath }}'

    - name: Print MySQL, SQLite, PostgreSQL database versions
      run: |
        mysql --version
        pg_config --version
        sqlite3 --version

    - name: add-apt-repository Clang 15
      if: ${{ matrix.compiler.key == 'clang15' }}
      run: >-
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key |
        sudo tee /etc/apt/trusted.gpg.d/llvm-15.asc

        sudo add-apt-repository -y
        --sourceslist 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main'

    - name: apt update
      run: |
        sudo apt update

    - name: apt install ${{ join(matrix.compiler.apt, ', ') }}, Qt 6.2.4 base, and ccache
      run: >-
        sudo apt install -y ${{ join(matrix.compiler.apt, ' ') }} ccache
        qt6-base-dev libqt6sql6-mysql libqt6sql6-sqlite libqt6sql6-psql

    - name: ninja install latest version
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        destination: ${{ env.TinyRunnerWorkPath }}/ninja-build

    - name: Ccache initialize
      id: initialize-ccache-cache
      run: |
        cachePath=$(ccache --get-config cache_dir)
        echo "CachePath=$cachePath" >> $GITHUB_OUTPUT

        echo "ImageOS=$ImageOS" >> $GITHUB_OUTPUT

    - name: Ccache restore cache 🕺
      uses: actions/cache@v3
      with:
        path: ${{ env.cache_path }}
        key: ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-
      env:
        cache_name: ${{ matrix.compiler.key }}-qt62
        cache_path: ${{ steps.initialize-ccache-cache.outputs.CachePath }}
        image_os: ${{ steps.initialize-ccache-cache.outputs.ImageOS }}

    - name: Ccache setup 🥳
      run: |
        echo '::group::Prepare ccache config'
        ccache --set-config compression=false
        ccache --set-config max_size=${{ matrix.compiler.key == 'gcc12' && '400M' || '250M' }}
        ccache --set-config sloppiness=include_file_ctime,include_file_mtime,pch_defines,time_macros
        ccache --show-config
        echo '::endgroup::'

        echo '::group::Clear ccache statistics'
        ccache --zero-stats
        echo '::endgroup::'

        echo '::group::Print version'
        ccache --version
        echo '::endgroup::'

    - name: vcpkg set-up environment
      run: |
        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        echo 'VCPKG_DEFAULT_TRIPLET=x64-linux-dynamic' >> $GITHUB_ENV
        echo 'VCPKG_MAX_CONCURRENCY=2' >> $GITHUB_ENV

    - name: CMake print version
      run: |
        cmake --version

    - name: TinyORM create build folder (${{ matrix.compiler.key }}-cmake-debug)
      run: |
        mkdir -p '../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug'

    - name: TinyORM cmake configure (${{ matrix.compiler.key }}-cmake-debug)
      run: >-
        cmake
        -S .
        -B ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug
        -G Ninja
        -D CMAKE_CXX_COMPILER_LAUNCHER:FILEPATH=/usr/bin/ccache
        -D CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/${{ matrix.compiler.command }}
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON
        -D CMAKE_BUILD_TYPE:BOOL=Debug
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=OFF
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true

    # - name: TinyORM cmake build ✨ (${{ matrix.compiler.key }}-cmake-debug)
    #   run: >-
    #     cmake --build ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug
    #     --target all --parallel 2

    - name: Ccache statistics
      run: |
        ccache --show-stats -vv

    - name: Create and Seed tables for unit tests 🎉
      working-directory: ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug/tests/testdata_tom
      run: >-
        export LD_LIBRARY_PATH=../..${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH

        ./tom_testdata migrate
        --database=tinyorm_testdata_tom_mysql,tinyorm_testdata_tom_postgres,tinyorm_testdata_tom_sqlite
        --seed --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: /usr/local/share/crystal-mysql/ca.pem
        DB_MYSQL_SSL_CERT: /usr/local/share/crystal-mysql/client-cert.pem
        DB_MYSQL_SSL_KEY: /usr/local/share/crystal-mysql/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_TESTDATA_ENV: testing

    - name: TinyORM execute ctest 🔥
      working-directory: ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug
      run: |
        ctest --output-on-failure
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: /usr/local/share/crystal-mysql/ca.pem
        DB_MYSQL_SSL_CERT: /usr/local/share/crystal-mysql/client-cert.pem
        DB_MYSQL_SSL_KEY: /usr/local/share/crystal-mysql/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_TESTS_ENV: testing

    - name: Tom example test some commands (MySQL) 🚀
      working-directory: ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug/examples/tom
      run: |
        export LD_LIBRARY_PATH=../..${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH

        ./tom migrate:install --database=tinyorm_tom_mysql --no-ansi
        ./tom migrate:status --database=tinyorm_tom_mysql --no-ansi
        ./tom migrate --database=tinyorm_tom_mysql --seed --no-ansi
        ./tom migrate:refresh --database=tinyorm_tom_mysql --seed --no-ansi
        ./tom migrate:status --database=tinyorm_tom_mysql --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: /usr/local/share/crystal-mysql/ca.pem
        DB_MYSQL_SSL_CERT: /usr/local/share/crystal-mysql/client-cert.pem
        DB_MYSQL_SSL_KEY: /usr/local/share/crystal-mysql/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (PostgreSQL) 🙌
      working-directory: ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug/examples/tom
      run: |
        export LD_LIBRARY_PATH=../..${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH

        ./tom migrate:install --database=tinyorm_tom_postgres --no-ansi
        ./tom migrate:status --database=tinyorm_tom_postgres --no-ansi
        ./tom migrate --database=tinyorm_tom_postgres --seed --no-ansi
        ./tom migrate:refresh --database=tinyorm_tom_postgres --seed --no-ansi
        ./tom migrate:status --database=tinyorm_tom_postgres --no-ansi
      env:
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (SQLite) 🏁
      working-directory: ../TinyORM-builds-cmake/build-${{ matrix.compiler.key }}-cmake-debug/examples/tom
      run: |
        export LD_LIBRARY_PATH=../..${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH

        ./tom migrate:install --database=tinyorm_tom_sqlite --no-ansi
        ./tom migrate:status --database=tinyorm_tom_sqlite --no-ansi
        ./tom migrate --database=tinyorm_tom_sqlite --seed --no-ansi
        ./tom migrate:refresh --database=tinyorm_tom_sqlite --seed --no-ansi
        ./tom migrate:status --database=tinyorm_tom_sqlite --no-ansi
      env:
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_EXAMPLE_ENV: testing

