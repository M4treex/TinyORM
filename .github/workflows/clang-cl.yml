name: clang-cl MSVC2022

on:
  pull_request:
  push:
    branches:
      - main
      - gh-actions

jobs:

  build:
    name: cmake build / ctest

    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3

    - name: PostgreSQL start service
      run: |
        Set-Service -Name postgresql-x64-14 -StartupType Manual
        Start-Service postgresql-x64-14

    - name: PostgreSQL add on the $env:Path
      run: |
        Write-Output "$env:PGBIN" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: PostgreSQL check service status
      run: |
        $pgsqlService = Get-Service postgresql-x64-14
        Write-Output $pgsqlService
        $pgsqlService.status.ToString() -ceq "Running" `
        -or $(throw 'postgresql-x64-14 service is not running') > $null
        pg_isready.exe

    - name: PostgreSQL create TinyORM user
      run: >-
        psql.exe
        --command="CREATE USER ${env:DB_PGSQL_USERNAME} PASSWORD '${env:DB_PGSQL_PASSWORD}'"
      env:
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: PostgreSQL create TinyORM database
      run: |
        createdb.exe --owner=$env:DB_PGSQL_USERNAME $env:DB_PGSQL_DATABASE
      env:
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: Hosts add MySQL server host URL
      run: >-
        "127.0.0.1`t${env:DB_MYSQL_HOST}" |
        Add-Content -Path "$env:windir/System32/drivers/etc/hosts" -Force
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}

    - name: MySQL create data folder
      run: |
        New-Item -Type Directory '${{ runner.workspace }}/../mysql/data'

    - name: MySQL initialize my.ini configuration
      working-directory: .github/resources/windows
      run: >-
        (Get-Content -Path ./my_8_ssl.template.ini) -creplace
        '\{MYSQL_DATADIR\}', '${{ runner.workspace }}/../mysql/data' -creplace
        '\{MYSQL_HOST\}', $env:DB_MYSQL_HOST |
        Set-Content -Path C:/mysql/my.ini
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}

    - name: MySQL initialize data directory
      run: |
        mysqld.exe --initialize-insecure --console

    - name: MySQL generate SSL certificates
      working-directory: ${{ runner.workspace }}/../mysql/data
      run: |
        # It's enough to remove only these three certificate-related files
        Remove-Item ./ca.pem, ./server-cert.pem, ./server-key.pem
        mysql_ssl_rsa_setup.exe --suffix=TinyORM

    - name: MySQL install/start service
      run: |
        mysqld.exe --install MySQL
        Start-Service MySQL

    - name: MySQL change root password
      run: >-
        "alter user '${env:DB_MYSQL_ROOT_USERNAME}'@'localhost'
        identified with caching_sha2_password by '${env:DB_MYSQL_ROOT_PASSWORD}'
        require issuer '/CN=MySQL_Server_TinyORM_Auto_Generated_CA_Certificate' and
        subject '/CN=MySQL_Server_TinyORM_Auto_Generated_Client_Certificate';" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --skip-password
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL download time zone POSIX tables
      working-directory: ${{ runner.temp }}
      run: >-
        $tzFileUrl = 'https://downloads.mysql.com/general/timezone_2022g_posix_sql.zip'

        # $response = Invoke-WebRequest -Uri $tzFileUrl -HttpVersion 2.0

        curl -fsSLO $tzFileUrl

        $filename = ($tzFileUrl -split '/')[-1]

        $filepath = Join-Path -Path $(Resolve-Path -Path .) -ChildPath $filename

        # $response | Select-Object -ExpandProperty Content |
        Set-Content -Path $filepath -AsByteStream

        7z.exe x -o"$(Resolve-Path -Path .)" $filepath

    - name: MySQL populate time zone tables 👌
      working-directory: ${{ runner.temp }}
      run: >-
        $filepath = Join-Path -Path $(Resolve-Path -Path .) -ChildPath timezone_2022g_posix_sql
        -AdditionalChildPath timezone_posix.sql

        # source path can't be quoted, it works correctly even with spaces

        "source $filepath" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD mysql

        Restart-Service MySQL
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL check service status
      run: >-
        $mysqlService = Get-Service MySQL

        Write-Output $mysqlService

        $mysqlService.status.ToString() -ceq "Running" -or
        $(throw 'MySQL service is not running') > $null

        mysqladmin.exe --user=$env:DB_MYSQL_ROOT_USERNAME
        --password=$env:DB_MYSQL_ROOT_PASSWORD ping
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM database
      run: >-
        "create database if not exists ``$env:DB_MYSQL_DATABASE``
        default character set $env:DB_MYSQL_CHARSET
        default collate $env:DB_MYSQL_COLLATION;" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM user
      run: >-
        "create user '${env:DB_MYSQL_USERNAME}'@'%'
        identified with caching_sha2_password by '${env:DB_MYSQL_PASSWORD}'
        require issuer '/CN=MySQL_Server_TinyORM_Auto_Generated_CA_Certificate' and
        subject '/CN=MySQL_Server_TinyORM_Auto_Generated_Client_Certificate';
        grant all privileges on ``$env:DB_MYSQL_DATABASE``.* to '${env:DB_MYSQL_USERNAME}'@'%';
        grant select on ``mysql``.``time_zone_name`` to '${env:DB_MYSQL_USERNAME}'@'%';
        flush privileges;" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}

    - name: MySQL add libmysql.dll on the $env:Path
      run: |
        Write-Output "C:\mysql\lib" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: SQLite create TinyORM database
      run: |
        touch "$env:DB_SQLITE_DATABASE"
      env:
        DB_SQLITE_DATABASE: ${{ runner.temp }}/${{ secrets.DB_SQLITE_DATABASE }}

    - name: Print MySQL, SQLite, PostgreSQL database versions
      run: |
        mysql.exe --version
        postgres.exe --version

    - name: Qt 6.3.2 install base components
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.3.2
        arch: win64_msvc2019_64
        setup-python: false
        extra: --external 7z.exe
        dir: '${{ runner.workspace }}/../'

    - name: QMYSQL install driver dlls (Qt 6.3.2)
      working-directory: ${{ runner.temp }}
      run: >-
        $response = Invoke-WebRequest -Uri $env:URL_QMYSQL_DLLS_MSVC_X64_6_3_2

        $filename = ($env:URL_QMYSQL_DLLS_MSVC_X64_6_3_2 -split '/')[-1]

        $filepath = Join-Path -Path $(Resolve-Path -Path .) -ChildPath $filename

        $response | Select-Object -ExpandProperty Content |
        Set-Content -Path $filepath -AsByteStream

        7z.exe x -o"${env:QT_PLUGIN_PATH}/sqldrivers" $filepath
      env:
        URL_QMYSQL_DLLS_MSVC_X64_6_3_2: ${{ secrets.URL_QMYSQL_DLLS_MSVC_X64_6_3_2 }}

    - name: vcpkg set-up environment
      run: |
        Write-Output "VCPKG_ROOT=${env:VCPKG_INSTALLATION_ROOT}" | `
        Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Output 'VCPKG_DEFAULT_TRIPLET=x64-windows' | `
        Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Output 'VCPKG_MAX_CONCURRENCY=2' | `
        Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Cache LLVM and Clang
      id: llvm-cached
      uses: actions/cache@v3
      with:
        path: |
          C:/Program Files/LLVM
        key: llvm-15.0.6

    - name: Install LLVM and Clang 15.0.6
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0.6"
        force-version: true
        cached: ${{ steps.llvm-cached.outputs.cache-hit }}

    - name: Visual Studio 2022 pwsh shell setup
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: CMake print version
      run: |
        cmake --version

    - name: TinyORM cmake configure (clang-cl-cmake-debug)
      run: >-
        cmake
        -S .
        -B ../TinyORM-builds-cmake/build-clang-cl-cmake-debug
        -G Ninja
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="${env:VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_C_COMPILER:FILEPATH="${env:LLVM_PATH}/bin/clang-cl.exe"
        -D CMAKE_CXX_COMPILER:FILEPATH="${env:LLVM_PATH}/bin/clang-cl.exe"
        -D CMAKE_BUILD_TYPE:BOOL=Debug
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF
        -D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=OFF
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON

    - name: TinyORM cmake build ✨ (clang-cl-cmake-debug)
      run: |
        cmake --build ../TinyORM-builds-cmake/build-clang-cl-cmake-debug --target all --parallel 2

    - name: Create and Seed tables for unit tests 🎉
      working-directory: ../TinyORM-builds-cmake/build-clang-cl-cmake-debug/tests/testdata_tom
      run: >-
        $env:Path = '..\..;' + $env:Path

        .\tom_testdata.exe migrate
        --database=tinyorm_testdata_tom_mysql,tinyorm_testdata_tom_postgres,tinyorm_testdata_tom_sqlite
        --seed --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: ${{ runner.workspace }}/../mysql/data/ca.pem
        DB_MYSQL_SSL_CERT: ${{ runner.workspace }}/../mysql/data/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ runner.workspace }}/../mysql/data/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: utf8
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ runner.temp }}/${{ secrets.DB_SQLITE_DATABASE }}
        TOM_TESTDATA_ENV: testing

    - name: TinyORM execute ctest 🔥
      working-directory: ../TinyORM-builds-cmake/build-clang-cl-cmake-debug
      run: ctest --output-on-failure
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: ${{ runner.workspace }}/../mysql/data/ca.pem
        DB_MYSQL_SSL_CERT: ${{ runner.workspace }}/../mysql/data/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ runner.workspace }}/../mysql/data/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: utf8
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ runner.temp }}/${{ secrets.DB_SQLITE_DATABASE }}
        TOM_TESTS_ENV: testing

    - name: Tom example test some commands (MySQL) 🚀
      working-directory: ../TinyORM-builds-cmake/build-clang-cl-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path
        .\tom.exe migrate:install --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_mysql --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST_SSL }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_SSL_CA: ${{ runner.workspace }}/../mysql/data/ca.pem
        DB_MYSQL_SSL_CERT: ${{ runner.workspace }}/../mysql/data/client-cert.pem
        DB_MYSQL_SSL_KEY: ${{ runner.workspace }}/../mysql/data/client-key.pem
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (PostgreSQL) 🙌
      working-directory: ../TinyORM-builds-cmake/build-clang-cl-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path
        .\tom.exe migrate:install --database=tinyorm_tom_postgres --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_postgres --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_postgres --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_postgres --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_postgres --no-ansi
      env:
        DB_PGSQL_CHARSET: utf8
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (SQLite) 🏁
      working-directory: ../TinyORM-builds-cmake/build-clang-cl-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path
        .\tom.exe migrate:install --database=tinyorm_tom_sqlite --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_sqlite --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_sqlite --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_sqlite --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_sqlite --no-ansi
      env:
        DB_SQLITE_DATABASE: ${{ runner.temp }}/${{ secrets.DB_SQLITE_DATABASE }}
        TOM_EXAMPLE_ENV: testing
