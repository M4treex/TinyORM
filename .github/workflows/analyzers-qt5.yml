name: Clang Tidy/Clazy Qt5.15

on:
  pull_request:
  push:
    branches:
      - main
      - gh-actions

jobs:

  clang-analyzers:
    name: clang-tidy and clazy

    runs-on: ubuntu-20.04

    env:
      TINY_CLANG_TIDY_EXECUTED: false

    steps:
    - uses: actions/checkout@v3

    - name: add-apt-repository gcc 11 and Qt 5.15.2
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo add-apt-repository -y ppa:beineri/opt-qt-5.15.2-focal

    - name: add-apt-repository Clang 14
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main'

    - name: apt update
      run: |
        sudo apt update

    - name: apt install clang-14, lld-14, g++-11, clang-tidy-14, Qt 5.15.2 base, and ccache
      run: |
        sudo apt install -y clang-14 lld-14 g++-11 clang-tidy-14 qt515base ccache

    - name: ninja install latest version
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        destination: ${{ runner.workspace }}/../ninja-build

    - name: Ccache initialize
      id: initialize-ccache-cache
      run: |
        cachePath=$(ccache --get-config cache_dir)
        echo "CachePath=$cachePath" >> $GITHUB_OUTPUT

        echo "ImageOS=$ImageOS" >> $GITHUB_OUTPUT

    - name: Ccache restore cache ðŸ•º
      uses: actions/cache@v3
      with:
        path: ${{ env.cache_path }}
        key: ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-
      env:
        cache_name: ${{ matrix.compiler.key }}-qt5
        cache_path: ${{ steps.initialize-ccache-cache.outputs.CachePath }}
        image_os: ${{ steps.initialize-ccache-cache.outputs.ImageOS }}

    - name: Ccache setup ðŸ¥³
      run: |
        echo '::group::Prepare ccache config'
        ccache --set-config compression=false
        ccache --set-config max_size=250M
        ccache --set-config sloppiness=include_file_ctime,include_file_mtime,pch_defines,time_macros
        ccache --show-config
        echo '::endgroup::'

        echo '::group::Clear ccache statistics'
        ccache --zero-stats
        echo '::endgroup::'

        echo '::group::Print version'
        ccache --version
        echo '::endgroup::'

    - name: vcpkg set-up environment
      run: |
        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        echo 'VCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/.github/resources/vcpkg-custom-triplets' \
        >> $GITHUB_ENV
        echo 'VCPKG_DEFAULT_TRIPLET=x64-linux-dynamic' >> $GITHUB_ENV
        echo 'VCPKG_MAX_CONCURRENCY=2' >> $GITHUB_ENV

    - name: CMake print version
      run: |
        cmake --version

    - name: TinyORM create build folder (clang-cmake-debug)
      run: |
        mkdir -p '../TinyORM-builds-cmake/build-clang-cmake-debug'

    - name: TinyORM cmake configure (clang-cmake-debug)
      run: >-
        source .github/resources/qt5env.sh

        cmake
        -S .
        -B ../TinyORM-builds-cmake/build-clang-cmake-debug
        -G Ninja
        -D CMAKE_CXX_COMPILER_LAUNCHER:FILEPATH=/usr/bin/ccache
        -D CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++-14
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON
        -D CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON
        -D CMAKE_BUILD_TYPE:BOOL=Debug
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=OFF
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON

    - name: TinyORM cmake build âœ¨ (clang-cmake-debug)
      run: |
        source .github/resources/qt5env.sh
        cmake --build ../TinyORM-builds-cmake/build-clang-cmake-debug --target all --parallel 2

    - name: Ccache statistics
      run: |
        ccache --show-stats

    - name: clazy-standalone install
      run: >-
        wget $URL_CLAZY_STANDALONE_LINUX_X64
        -O ${{ runner.temp }}/clazy-standalone.tar.bz2 --no-verbose

        sudo tar xjvf ${{ runner.temp }}/clazy-standalone.tar.bz2 --directory /usr/local
      env:
        URL_CLAZY_STANDALONE_LINUX_X64: ${{ secrets.URL_CLAZY_STANDALONE_LINUX_X64 }}

    - name: TinyORM execute clang-tidy ðŸ”¥
      run: |
        echo 'TINY_CLANG_TIDY_EXECUTED=true' >> $GITHUB_ENV

        ln -s ../TinyORM-builds-cmake/build-clang-cmake-debug/compile_commands.json \
        compile_commands.json

        run-clang-tidy-14 '(?:src\/|tests\/).+\/(?!mocs_)[\w_\-\+]+\.cpp$'

    # Disabled checks
    # Level 2      - qstring-allocations
    # Manual level - qt4-qstring-from-array, qt6-qlatin1stringchar-to-u,
    #                qvariant-template-instantiation
    - name: TinyORM execute clazy-standalone ðŸš€
      if: env.TINY_CLANG_TIDY_EXECUTED == 'true' && (success() || failure())
      run: |
        checks=\
        'level0,level1,level2,'\
        `# Manual checks`\
        'assert-with-side-effects,container-inside-loop,detaching-member,'\
        'heap-allocated-small-trivial-type,ifndef-define-typo,isempty-vs-count,jni-signatures,'\
        'qhash-with-char-pointer-key,qproperty-type-mismatch,qrequiredresult-candidates,'\
        'qstring-varargs,qt-keywords,qt6-deprecated-api-fixes,qt6-fwd-fixes,qt6-header-fixes,'\
        'qt6-qhash-signature,raw-environment-function,reserve-candidates,'\
        'signal-with-return-value,thread-with-slots,tr-non-literal,unneeded-cast,'\
        'use-chrono-in-qtimer,'\
        `# New in Clazy 1.11`\
        'unexpected-flag-enumerator-value,'\
        'use-arrow-operator-instead-of-data,'\
        `# Checks Excluded from level2`\
        'no-qstring-allocations'

        tools/run-clazy-standalone -checks="$checks" \
        -header-filter='(orm|tom|migrations)/.+\.(h|hpp)$' \
        '(?:src\/|tests\/).+\/(?!mocs_)[\w_\-\+]+\.cpp$'

