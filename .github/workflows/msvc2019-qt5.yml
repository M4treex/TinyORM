name: MSVC2019 Qt5.15

on:
  pull_request:
  push:
    branches:
      - main
      - gh-actions

jobs:

  build:
    name: cmake build / ctest

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3

    - name: TinyORM prepare environment
      run: |
        $runnerWorkPath = Resolve-Path -Path '${{ runner.workspace }}/..'
        "TinyRunnerWorkPath=$runnerWorkPath" >> $env:GITHUB_ENV

        $sqlitePath = Join-Path -Path $runnerWorkPath -ChildPath "SQLite/$env:DB_SQLITE_DATABASE"
        "TinySQLitePath=$sqlitePath" >> $env:GITHUB_ENV
      env:
        DB_SQLITE_DATABASE: ${{ secrets.DB_SQLITE_DATABASE }}

    - name: PostgreSQL start service
      run: |
        Set-Service -Name postgresql-x64-14 -StartupType Manual
        Start-Service postgresql-x64-14

    - name: PostgreSQL add on the $env:Path
      run: |
        "$env:PGBIN" >> $env:GITHUB_PATH

    - name: PostgreSQL check service status
      run: |
        $pgsqlService = Get-Service postgresql-x64-14
        Write-Output $pgsqlService

        $pgsqlService.status.ToString() -ceq 'Running' `
        -or $(throw 'postgresql-x64-14 service is not running') > $null

        pg_isready.exe

    - name: PostgreSQL create TinyORM user
      run: |
        "CREATE USER $env:DB_PGSQL_USERNAME PASSWORD '$env:DB_PGSQL_PASSWORD'" | psql.exe
      env:
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: PostgreSQL create TinyORM database
      run: |
        createdb.exe --owner=$env:DB_PGSQL_USERNAME $env:DB_PGSQL_DATABASE
      env:
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}

    - name: MySQL create data folder
      run: |
        New-Item -Type Directory '${{ env.TinyRunnerWorkPath }}/mysql/data'

    - name: MySQL initialize my.ini configuration
      working-directory: .github/resources/windows
      run: >-
        (Get-Content -Path ./my_5.template.ini) -creplace
        '\{MYSQL_DATADIR\}', '${{ env.TinyRunnerWorkPath }}/mysql/data' -creplace
        '\{MYSQL_HOST\}', $env:DB_MYSQL_HOST |
        Set-Content -Path C:/mysql/my.ini
      env:
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST }}

    - name: MySQL initialize data directory
      run: |
        mysqld.exe --initialize-insecure --console

    - name: MySQL install/start service
      run: |
        mysqld.exe --install MySQL
        Start-Service MySQL

    - name: MySQL change root password
      run: >-
        "alter user '$env:DB_MYSQL_ROOT_USERNAME'@'localhost'
        identified by '$env:DB_MYSQL_ROOT_PASSWORD';" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --skip-password
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL download time zone POSIX tables
      working-directory: ${{ runner.temp }}
      run: >-
        $tzFileUrl = 'https://downloads.mysql.com/general/timezone_2022g_posix_sql.zip'

        # $response = Invoke-WebRequest -Uri $tzFileUrl -HttpVersion 2.0

        curl -fsSLO $tzFileUrl

        $filename = ($tzFileUrl -split '/')[-1]

        $filepath = Join-Path -Path $(Resolve-Path -Path .) -ChildPath $filename

        # $response | Select-Object -ExpandProperty Content |
        Set-Content -Path $filepath -AsByteStream

        7z.exe x -o"$(Resolve-Path -Path .)" $filepath

    - name: MySQL populate time zone tables 👌
      working-directory: ${{ runner.temp }}
      run: >-
        $filepath = Join-Path -Path $(Resolve-Path -Path .) -ChildPath timezone_2022g_posix_sql
        -AdditionalChildPath timezone_posix.sql

        # source path can't be quoted, it works correctly even with spaces

        "source $filepath" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD mysql

        Restart-Service MySQL
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL check service status
      run: >-
        $mysqlService = Get-Service MySQL

        Write-Output $mysqlService

        $mysqlService.status.ToString() -ceq 'Running' -or
        $(throw 'MySQL service is not running') > $null

        mysqladmin.exe --user=$env:DB_MYSQL_ROOT_USERNAME
        --password=$env:DB_MYSQL_ROOT_PASSWORD ping
      env:
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM database
      run: >-
        "create database if not exists ``$env:DB_MYSQL_DATABASE``
        default character set $env:DB_MYSQL_CHARSET
        default collate $env:DB_MYSQL_COLLATION;" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_57_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}

    - name: MySQL create TinyORM user
      run: >-
        "create user '$env:DB_MYSQL_USERNAME'@'%'
        identified by '$env:DB_MYSQL_PASSWORD';
        grant all privileges on ``$env:DB_MYSQL_DATABASE``.* to '$env:DB_MYSQL_USERNAME'@'%';
        grant select on ``mysql``.``time_zone_name`` to '$env:DB_MYSQL_USERNAME'@'%';
        flush privileges;" |
        mysql.exe --user=$env:DB_MYSQL_ROOT_USERNAME --password=$env:DB_MYSQL_ROOT_PASSWORD
      env:
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_ROOT_PASSWORD: ${{ secrets.DB_MYSQL_ROOT_PASSWORD }}
        DB_MYSQL_ROOT_USERNAME: ${{ secrets.DB_MYSQL_ROOT_USERNAME }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}

    - name: MySQL add libmysql.dll on the $env:Path
      run: |
        'C:\mysql\lib' >> $env:GITHUB_PATH

    - name: SQLite create TinyORM database
      run: |
        New-Item -Type Directory (Split-Path -Parent ${{ env.TinySQLitePath }})

        touch '${{ env.TinySQLitePath }}'

    - name: Print MySQL, PostgreSQL database versions
      run: |
        mysql.exe --version
        postgres.exe --version

    - name: Qt 5.15.2 install base components
      uses: jurplel/install-qt-action@v3
      with:
        archives: qtbase
        version: 5.15.2
        arch: win64_msvc2019_64
        cache: true
        setup-python: false
        extra: --external 7z.exe
        dir: ${{ env.TinyRunnerWorkPath }}

    - name: QMYSQL driver dlls initialize download (Qt 5.15.2)
      id: initialize-qmysql-dlls
      run: |
        $filename = ($env:URL_QMYSQL_DLLS_MSVC_X64_5_15_2 -split '/')[-1]
        "Filename=$filename" >> $env:GITHUB_OUTPUT

        $filepath = Join-Path -Path ${{ runner.temp }} -ChildPath $filename
        "Filepath=$filepath" >> $env:GITHUB_OUTPUT

        $response = Invoke-WebRequest -Uri $env:URL_CACHE_HASH_WINDOWS
        "Hash=$($response.Content)" >> $env:GITHUB_OUTPUT
      env:
        URL_QMYSQL_DLLS_MSVC_X64_5_15_2: ${{ secrets.URL_QMYSQL_DLLS_MSVC_X64_5_15_2 }}
        URL_CACHE_HASH_WINDOWS: ${{ secrets.URL_CACHE_HASH_WINDOWS }}

    - name: QMYSQL driver dlls restore cache
      uses: actions/cache@v3
      id: cache-drivers-qmysql-dlls
      with:
        path: ${{ env.archive_filepath }}
        key: ${{ runner.os }}-drivers-${{ env.cache_name }}-${{ env.cache_hash }}
      env:
        archive_filepath: ${{ steps.initialize-qmysql-dlls.outputs.Filepath }}
        cache_hash: ${{ steps.initialize-qmysql-dlls.outputs.Hash }}
        cache_name: qmysql-dlls

    - name: QMYSQL driver dlls download (Qt 5.15.2)
      if: steps.cache-drivers-qmysql-dlls.outputs.cache-hit != 'true'
      run: >-
        $response = Invoke-WebRequest -Uri $env:URL_QMYSQL_DLLS_MSVC_X64_5_15_2

        $response | Select-Object -ExpandProperty Content |
        Set-Content -Path $env:archive_filepath -AsByteStream
      env:
        archive_filepath: ${{ steps.initialize-qmysql-dlls.outputs.Filepath }}
        URL_QMYSQL_DLLS_MSVC_X64_5_15_2: ${{ secrets.URL_QMYSQL_DLLS_MSVC_X64_5_15_2 }}

    - name: QMYSQL driver dlls install (Qt 5.15.2)
      run: |
        7z.exe x -o"$env:QT_PLUGIN_PATH/sqldrivers" $env:archive_filepath
      env:
        archive_filepath: ${{ steps.initialize-qmysql-dlls.outputs.Filepath }}

    - name: MySQL 8 libmysql.dll initialize download (Qt 5.15.2)
      id: initialize-mysql_8-libmysql-dll
      run: |
        $filename = ($env:URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2 -split '/')[-1]
        "Filename=$filename" >> $env:GITHUB_OUTPUT

        $filepath = Join-Path -Path ${{ runner.temp }} -ChildPath $filename
        "Filepath=$filepath" >> $env:GITHUB_OUTPUT

        $response = Invoke-WebRequest -Uri $env:URL_CACHE_HASH_WINDOWS
        "Hash=$($response.Content)" >> $env:GITHUB_OUTPUT
      env:
        URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2: ${{ secrets.URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2 }}
        URL_CACHE_HASH_WINDOWS: ${{ secrets.URL_CACHE_HASH_WINDOWS }}

    - name: MySQL 8 libmysql.dll restore cache
      uses: actions/cache@v3
      id: cache-drivers-mysql_8-libmysql-dll
      with:
        path: ${{ env.archive_filepath }}
        key: ${{ runner.os }}-drivers-${{ env.cache_name }}-${{ env.cache_hash }}
      env:
        archive_filepath: ${{ steps.initialize-mysql_8-libmysql-dll.outputs.Filepath }}
        cache_hash: ${{ steps.initialize-mysql_8-libmysql-dll.outputs.Hash }}
        cache_name: mysql_8-libmysql-dll

    - name: MySQL 8 libmysql.dll download (Qt 5.15.2)
      if: steps.cache-drivers-mysql_8-libmysql-dll.outputs.cache-hit != 'true'
      run: |
        $response = Invoke-WebRequest -Uri $env:URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2

        $response | Select-Object -ExpandProperty Content |
        Set-Content -Path $env:archive_filepath -AsByteStream
      env:
        archive_filepath: ${{ steps.initialize-mysql_8-libmysql-dll.outputs.Filepath }}
        URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2: ${{ secrets.URL_LIBMYSQL_DLL_MYSQL_8_MSVC_X64_5_15_2 }}

    - name: MySQL 8 libmysql.dll install (Qt 5.15.2)
      run: |
        7z.exe x -o'${{ runner.workspace }}/TinyORM-bin' $env:archive_filepath
      env:
        archive_filepath: ${{ steps.initialize-mysql_8-libmysql-dll.outputs.Filepath }}

    - name: MySQL 8 libmysql.dll add on the $env:Path
      run: |
        '${{ runner.workspace }}/TinyORM-bin' >> $env:GITHUB_PATH

    - name: Ccache initialize
      id: initialize-ccache-cache
      run: |
        Write-Output '::group::Install'
        choco install ccache -y
        Write-Output '::endgroup::'

        Write-Output '::group::get-config cache_dir'
        $cachePath = ccache.exe --get-config cache_dir
        "CachePath=$cachePath" >> $env:GITHUB_OUTPUT

        "ImageOS=$env:ImageOS" >> $env:GITHUB_OUTPUT
        Write-Output '::endgroup::'

    - name: Ccache restore cache 🕺
      uses: actions/cache@v3
      with:
        path: ${{ env.cache_path }}
        key: ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ env.image_os }}-ccache-${{ env.cache_name }}-
      env:
        cache_name: msvc2019-qt5
        cache_path: ${{ steps.initialize-ccache-cache.outputs.CachePath }}
        image_os: ${{ steps.initialize-ccache-cache.outputs.ImageOS }}

    - name: Ccache setup 🥳
      run: |
        Write-Output '::group::Prepare ccache config'
        ccache.exe --set-config compression=false
        ccache.exe --set-config max_size=500M
        ccache.exe --set-config sloppiness=include_file_ctime,include_file_mtime,pch_defines,time_macros
        ccache.exe --show-config
        Write-Output '::endgroup::'

        Write-Output '::group::Clear ccache statistics'
        ccache.exe --zero-stats
        Write-Output '::endgroup::'

        Write-Output '::group::Print version'
        ccache.exe --version
        Write-Output '::endgroup::'

    - name: vcpkg set-up environment
      run: |
        "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV
        'VCPKG_DEFAULT_TRIPLET=x64-windows' >> $env:GITHUB_ENV
        'VCPKG_MAX_CONCURRENCY=2' >> $env:GITHUB_ENV

    - name: Visual Studio 2019 pwsh shell setup
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: CMake print version
      run: |
        cmake --version

    - name: TinyORM create build folder (msvc-cmake-debug)
      run: |
        New-Item -Type Directory '../TinyORM-builds-cmake/build-msvc-cmake-debug'

    - name: TinyORM cmake configure (msvc-cmake-debug)
      run: >-
        cmake
        -S .
        -B ../TinyORM-builds-cmake/build-msvc-cmake-debug
        -G Ninja
        -D CMAKE_CXX_COMPILER_LAUNCHER:FILEPATH='C:/ProgramData/chocolatey/bin/ccache.exe'
        -D CMAKE_TOOLCHAIN_FILE:FILEPATH="$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        -D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON
        -D CMAKE_BUILD_TYPE:BOOL=Debug
        -D VERBOSE_CONFIGURE:BOOL=ON
        -D MATCH_EQUAL_EXPORTED_BUILDTREE:BOOL=OFF
        -D MYSQL_PING:BOOL=ON
        -D BUILD_TESTS:BOOL=ON
        -D ORM:BOOL=ON
        -D TOM:BOOL=ON
        -D TOM_EXAMPLE:BOOL=ON

    - name: TinyORM cmake build ✨ (msvc-cmake-debug)
      run: |
        cmake --build ../TinyORM-builds-cmake/build-msvc-cmake-debug --target all --parallel 2

    - name: Ccache statistics
      run: |
        ccache.exe --show-stats -vv

    - name: Create and Seed tables for unit tests 🎉
      working-directory: ../TinyORM-builds-cmake/build-msvc-cmake-debug/tests/testdata_tom
      run: >-
        $env:Path = '..\..;' + $env:Path

        .\tom_testdata.exe migrate
        --database=tinyorm_testdata_tom_mysql,tinyorm_testdata_tom_postgres,tinyorm_testdata_tom_sqlite
        --seed --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_57_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_TESTDATA_ENV: testing

    - name: TinyORM execute ctest 🔥
      working-directory: ../TinyORM-builds-cmake/build-msvc-cmake-debug
      run: |
        ctest --output-on-failure
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_57_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_TESTS_ENV: testing

    - name: Tom example test some commands (MySQL) 🚀
      working-directory: ../TinyORM-builds-cmake/build-msvc-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path

        .\tom.exe migrate:install --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_mysql --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_mysql --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_mysql --no-ansi
      env:
        DB_MYSQL_CHARSET: ${{ secrets.DB_MYSQL_CHARSET }}
        DB_MYSQL_COLLATION: ${{ secrets.DB_MYSQL_57_COLLATION }}
        DB_MYSQL_DATABASE: ${{ secrets.DB_MYSQL_DATABASE }}
        DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST }}
        DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
        DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (PostgreSQL) 🙌
      working-directory: ../TinyORM-builds-cmake/build-msvc-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path

        .\tom.exe migrate:install --database=tinyorm_tom_postgres --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_postgres --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_postgres --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_postgres --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_postgres --no-ansi
      env:
        DB_PGSQL_CHARSET: ${{ secrets.DB_PGSQL_CHARSET }}
        DB_PGSQL_DATABASE: ${{ secrets.DB_PGSQL_DATABASE }}
        DB_PGSQL_HOST: ${{ secrets.DB_PGSQL_HOST }}
        DB_PGSQL_PASSWORD: ${{ secrets.DB_PGSQL_PASSWORD }}
        DB_PGSQL_USERNAME: ${{ secrets.DB_PGSQL_USERNAME }}
        TOM_EXAMPLE_ENV: testing

    - name: Tom example test some commands (SQLite) 🏁
      working-directory: ../TinyORM-builds-cmake/build-msvc-cmake-debug/examples/tom
      run: |
        $env:Path = '..\..;' + $env:Path

        .\tom.exe migrate:install --database=tinyorm_tom_sqlite --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_sqlite --no-ansi
        .\tom.exe migrate --database=tinyorm_tom_sqlite --seed --no-ansi
        .\tom.exe migrate:refresh --database=tinyorm_tom_sqlite --seed --no-ansi
        .\tom.exe migrate:status --database=tinyorm_tom_sqlite --no-ansi
      env:
        DB_SQLITE_DATABASE: ${{ env.TinySQLitePath }}
        TOM_EXAMPLE_ENV: testing
